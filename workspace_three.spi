# Welcome to Sonic Pi

#Chaos Theory
#Coded by Davids Fiddle

bpm = 60
use_random_seed 123
list_i = synth_names
list_s = scale_names
stop_time = rand_i(60)+60
f0 = 1
f1 = 1
f2 = 1

n0 = 60
s0 = :major
r0 = 60
o0 = 1
i0 = :saw
a0 = 0.8

n1 = 60
s1 = :major
r1 = 60
o1 = 1
i1 = :saw
a1 = 1

n2 = 60
s2 = :major
r2 = 60
o2 = 1
i2 = :saw
a2 = 1.2

live_loop :clock do
  with_bpm bpm do
    tick
    cue 'c',look
    sleep 0.25
  end
  stop if f0+f1+f2 == 0
end

live_loop :mod do
  sync "/cue/c"
  #Modulate the synths used
  if one_in(n0)
    i1 = list_i.choose
  end
  if one_in(n1)
    i2 = list_i.choose
  end
  if one_in(n1)
    i0 = list_i.choose
  end
  #Modulate the range
  if one_in(o2)
    o0 = (ring 1,2,3)[o1]
    r0 = (range 12,80).choose
  end
  if one_in(o0)
    o1 = (ring 1,2,3)[o2]
    r1 = (range 12,80).choose
  end
  if one_in(o1)
    o2 = (ring 1,2,3)[o0]
    r2 = (range 12,80).choose
  end
  #Modulate the scales
  if one_in(n0)
    s1 = list_s.choose
  end
  if one_in(n1)
    s2 = list_s.choose
  end
  if one_in(n2)
    s0 = list_s.choose
  end
  #Modulate the volume
  if one_in(o2)
    a0 = a1 / a0
  end
  if one_in(o0)
    a0 = a2 / a1
  end
  if one_in(o1)
    a0 = a0 / a2
  end
  #Modulate the speed
  if one_in(r0 / 2)
    bpm = bpm * (range 1,2,step: 0.05).choose
  end
  if one_in(r1 / 2)
    bpm = bpm * (range 0.5,1,step: 0.05).choose
  end
  if one_in(r2 / 2)
    bpm = (range 10,240,step: 2).choose
  end
end

live_loop :v0 do
  sync "/cue/c"
  sleep (ring 0,0.125,0.25)[o1]
  use_synth i0
  use_synth_defaults amp: a0, cutoff: r1
  n0 = (ring *(scale r0,s0,num_octaves: o0),:r,:r).choose
  play n0
  if vt > stop_time
    f0 = 0
    stop if one_in(10)
  end
end
live_loop :v1 do
  sync "/cue/c"
  sleep (ring 0,0.125,0.25)[o2]
  use_synth i1
  use_synth_defaults amp: a1, cutoff: r2
  n1 = (ring *(scale r1,s1,num_octaves: o1),:r,:r).choose
  play n1
  if vt > stop_time
    f1 = 0
    stop if one_in(10)
  end
end
live_loop :v2 do
  sync "/cue/c"
  sleep (ring 0,0.125,0.25)[o0]
  use_synth i2
  use_synth_defaults amp: a2, cutoff: r0
  n2 = (ring *(scale r2,s2,num_octaves: o2),:r,:r).choose
  play n2
  if vt > stop_time
    f2 = 0
    stop if one_in(10)
  end
end